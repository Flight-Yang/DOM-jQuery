{"version":3,"sources":["main.js"],"names":["x","jQuery","children","print"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA,IAAMA,CAAC,GAAGC,MAAM,CAAC,OAAD,CAAhB;AACAD,CAAC,CAACE,QAAF,GAAaC,KAAb","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["//第一次代码\r\n// const api = jQuery('.test');//不返回元素，返回api对象\r\n// //这里不用点red是因为不是选择器,还有第一次返回api的骚操作,这叫链式操作\r\n// api.addClass('red') //this就是api,记得call方法，原型里默认传递调用元素\r\n//    .addClass('blue');\r\n\r\n//第一版简化后 对应this,这里class：test是api\r\n// jQuery('.test')\r\n//  .addClass('red')\r\n//  .addClass('blue');\r\n\r\n//第二次代码\r\n// const api1 = jQuery('.test');\r\n// api1.addClass('blue');\r\n// const api2 = api1.find('.child');\r\n// //对应find,返回child\r\n// api2.addClass('black');\r\n// //对应this,返回test\r\n// api1.addClass('green');\r\n\r\n//第二版简化后 对应find 在这里test内部的class：child是新的api\r\n// jQuery('.test')\r\n// .find('.child')\r\n// .addClass('black');\r\n\r\n//第三版代码\r\n// const api1 = jQuery('.test');\r\n// const api2 = api1.find('.child').addClass('red')\r\n// //这里返回到test的api了,可以看end()方法,把yellow加到test身上\r\n// const oldApi = api2.end().addClass('yellow');\r\n\r\n//第三版简化\r\n// jQuery('.test')\r\n// .find('.child')\r\n// .addClass('red')\r\n// .end()\r\n// .addClass('yellow');\r\n\r\n//第四版代码\r\n// const x = jQuery('.test').find('.child');\r\n// //这里的div指each方法里的elements[i]\r\n// x.each((div,w)=>console.log(div,w));\r\n\r\n//第五版代码\r\n// const x = jQuery('.test');\r\n// x.parent().print();\r\n\r\n//第六版代码\r\nconst x = jQuery('.test');\r\nx.children().print();"]}